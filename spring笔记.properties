1.Spring源码系列之容器启动流程
    参考链接：.https://juejin.cn/post/6993313671791247368
    参考类：
        org.springframework.orm.MyApplication
    1.this调用：初始化DefaultListableBeanFactory
    2.register方法：
    3.refresh方法（核心）
2.spring源码系列----循环依赖源码分析：（写的超好，推荐）
    通过三级缓存来解决循环依赖的
        https://juejin.cn/post/6997209721232949255
    注意：
        1.正常普通的bean是放在三级缓存中
        2. 循环依赖的对象只能在一级二级缓存中取

            缓存单例bean到三级缓存中, 以防止循环依赖
            判断是否是早期引用的bean, 如果是, 则允许提前暴露引用

        问题：
            1. 为什么需要二级缓存和三级缓存？
            2.有没有解决构造函数的循环依赖
            3.有没有解决多例下的循环依赖
3.Spring 解决循环依赖必须要三级缓存吗？(超级好)
    解决循环依赖的核心是提前暴露对象
    https://juejin.cn/post/6882266649509298189
4。spring boot学习之用户class文件扫描总结
    https://blog.csdn.net/weixin_44181697/article/details/98526044
    参考方法：
        org.springframework.context.annotation.ComponentScanAnnotationParser.parse
5.spring的注解：@Scope
    https://juejin.cn/post/6868913998961197064
    注意：
        当一个单例的 Bean，使用 autowired 注解标记其属性时，你一定要注意这个属性值会被固定下来。
6.显式引用 Bean 时首字母忽略大小写
    如果连续两个都是大写，会选择大写
7.@value的三大步骤：
    1.寻找 @Value
    2.解析 @Value 的字符串值
    3.将解析结果转化为要装配的对象的类型
    参考：
        org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency
8.默认构造器中引用依赖类，抛空指针异常
    原因：
        使用 @Autowired 直接标记在成员属性上而引发的装配行为是发生在构造器执行之后的
    解决方案：
        1.创建一个有参构造器，把依赖类作为参数传进去
        2.添加 init 方法，并且使用 PostConstruct 注解进行修饰：
        3.实现 InitializingBean 接口，在其 afterPropertiesSet() 方法中执行初始化代码：
9。SpringAOP 事务失效：
    解决办法：
        1.自己引用自己，通过@Autowired 注解的
        2.直接从 AopContext 获取当前的 Proxy。需要在 @EnableAspectJAutoProxy 里加一个配置项exposeProxy = true
    spring实现AOP的方法：
        https://juejin.cn/post/6965732777962668062、
    参考这个类：org.springframework.aop.framework.DefaultAopProxyFactory.createAopProxy
    注意启动切面：@EnableAspectJAutoProxy

10.Around、Before、After、AfterReturning、AfterThrowing的执行顺序如何
    参考文章
        https://blog.csdn.net/wujian_csdn_csdn/article/details/113243094
顺序是这个：
    Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class)
    参考类：
        org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory
19.什么样的对象具备是被动态代理创建出来的对象，才会被 Spring增强，具备 AOP 该有的功能。
    1.一种是被 @Autowired 注解的，例如，在类的内部，自己引用自己
    2.直接从 AopContext 获取当前的 Proxy。（第二种方法）
20. Spring 使用 CGLIB 生成 Proxy 的原理
    1.代理对象实际是是 被代理对象的一个子类，
    2.它会 overwrite 所有 public 和protected 方法，并在内部将调用委托给原始的 AdminUserService 实例。
    三个步骤：
        定义自定义的 MethodInterceptor 负责委托方法执行；
        创建 Enhance 并设置 Callback 为上述 MethodInterceptor；
        enhancer.create() 创建代理。

    注意：
        1.CGLIB代理对象获取不到代理对象的属性
        2.通过其方法可以获取对象属性
21.查看java生成的字节码文件：
    https://www.jianshu.com/p/d4c0a72167ad
22.前端传String转换为日期，可以用这个转换
 @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date
23.参考源码：
    https://juejin.cn/post/6888970251822235655

